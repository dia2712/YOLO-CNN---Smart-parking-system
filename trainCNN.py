# -*- coding: utf-8 -*-
"""cnnTraining.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BWQ6lLTyZs_AETsqIn_T3d2XeEgj-9vZ
"""

pip install tensorflow

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os

# Define dataset path (Make sure this contains 'empty' & 'occupied' folders)
data_dir = "/content/drive/MyDrive/parkingSlotdetection/labeledParkingSlots"

# Define parameters
batch_size = 32
img_size = (128, 128)  # Resize images to 128x128

# Data Augmentation to improve generalization
datagen = ImageDataGenerator(
    rescale=1./255,          # Normalize pixel values
    rotation_range=20,       # Rotate images randomly
    width_shift_range=0.2,   # Horizontal shift
    height_shift_range=0.2,  # Vertical shift
    shear_range=0.2,         # Shearing transformation
    zoom_range=0.2,          # Zoom in/out
    horizontal_flip=True,    # Flip images
    validation_split=0.2     # 20% data for validation
)

# Load Training Data
train_data = datagen.flow_from_directory(
    data_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode="binary",
    subset="training"
)

# Load Validation Data
val_data = datagen.flow_from_directory(
    data_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode="binary",
    subset="validation"
)

# Print class mapping to ensure labels are correct
print("Class labels:", train_data.class_indices)  # Should print {'empty': 0, 'occupied': 1}

model = keras.Sequential([
    layers.Conv2D(32, (3,3), activation="relu", input_shape=(128, 128, 3)),
    layers.MaxPooling2D(2,2),

    layers.Conv2D(64, (3,3), activation="relu"),
    layers.MaxPooling2D(2,2),

    layers.Flatten(),
    layers.Dense(64, activation="relu"),
    layers.Dropout(0.5),
    layers.Dense(1, activation="sigmoid")  # Binary Classification
])

# Compile Model
model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

# Train Model
history = model.fit(train_data, validation_data=val_data, epochs=10)

# Save Model
model.save("cnn_model_updated.h5")

import matplotlib.pyplot as plt

# Plot training & validation accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()